= form_for(@group, html: {class: 'form-horizontal'}) do |f|
  - if @group.errors.any?
    = render 'shared/error_messages', target: @group
  .field.form-group
    = f.label :group_name, class: 'control-label col-sm-2'
    .col-sm-6
      = f.text_field :group_name, class: 'form-control'
  .field.form-group
    = f.label :topics, class: 'control-label col-sm-2'
    .col-sm-6
      = f.text_area :topics, class: 'form-control'
  .field.form-group
    = f.label :starts_at, class: 'control-label col-sm-2'
    .col-sm-6
      .input-group.date
        = f.text_field :starts_at, class: 'form-control', id: 'datetimepicker1'
        %span.input-group-addon
          %span.glyphicon.glyphicon-calendar
  .field.form-group
    = f.label :ends_at, class: 'control-label col-sm-2'
    .col-sm-6
      .input-group.date
        = f.text_field :ends_at, class: 'form-control', id: 'datetimepicker2'
        %span.input-group-addon
          %span.glyphicon.glyphicon-calendar
  .field.form-group
    = f.label :venue, class: 'control-label col-sm-2'
    .col-sm-6
      = f.text_field :venue, class: 'form-control'
      %br
      .embed-responsive.embed-responsive-16by9
        #map.embed-responsive-item
  .field.form-group
    = f.label :max_members, class: 'control-label col-sm-2'
    .col-sm-2
      = f.number_field :max_members, in: 2..1000, class: 'form-control'
  .field.form-group
    = f.label :privacy, class: 'control-label col-sm-2'
    .col-sm-6
      .radio
        %label
          = f.radio_button :privacy, 'public'
          = fa_icon 'globe'
          Public group
          %small.help-block Anyone can join the group.
      .radio
        %label
          = f.radio_button :privacy, 'closed'
          = fa_icon 'lock'
          Closed group
          %small.help-block Anyone can ask an invitation to the group.
          %small.help-block Anyone in the group can accept new members.
          %small.help-block Anyone in the group can send invitations
      .radio
        %label
          = f.radio_button :privacy, 'private'
          = fa_icon 'user'
          Private group
          %small.help-block Anyone can ask an invitation to the group.
          %small.help-block Anyone in the group can send invitations.
          %small.help-block Only group owner can accept new members.
  .field.form-group
    .col-sm-6
      = f.hidden_field :latitude, id: 'gmap_latitude'
      = f.hidden_field :longitude, id: 'gmap_longitude'
      = f.hidden_field :gmap_zoom, id: 'gmap_zoom'
  .actions.form-group
    .col-sm-6
      = f.submit class: 'btn btn-primary btn-lg'


-#.container
-#  .col-md-5
-#    .form-group
-#      #datetimepicker6.input-group.date
-#        %input.form-control{:type => "text"}/
-#        %span.input-group-addon
-#          %span.glyphicon.glyphicon-calendar
-#  .col-md-5
-#    .form-group
-#      #datetimepicker7.input-group.date
-#        %input.form-control{:type => "text"}/
-#        %span.input-group-addon
-#          %span.glyphicon.glyphicon-calendar
:javascript
  $(function () {
        $('#datetimepicker1').datetimepicker({
          format: "YYYY-MM-DD HH:mm"
        });
        $('#datetimepicker2').datetimepicker({
          format: "YYYY-MM-DD HH:mm",
          useCurrent: false //Important! See issue #1075
        });
        $("#datetimepicker1").on("dp.change", function (e) {
            $('#datetimepicker2').data("DateTimePicker").minDate(e.date);
        });
        $("#datetimepicker2").on("dp.change", function (e) {
            $('#datetimepicker1').data("DateTimePicker").maxDate(e.date);
        });
    });


%script{src: '//maps.google.com/maps/api/js?v=3.13&amp;sensor=false&amp;libraries=geometry', type: 'text/javascript'}
%script{src: '//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js', type: 'text/javascript'}
:javascript
    handler = Gmaps.build('Google');
    var markers_options = { draggable: true };
    handler.buildMap({
      provider: { auto_zoom: false },
      internal: {id: 'map'}},
      function(){
        markers = handler.addMarkers(#{raw @hash.to_json}, markers_options);
        handler.bounds.extendWith(markers);
        handler.fitMapToBounds();
        handler.getMap().setZoom(#{@group.gmap_zoom || 16});

        // Callback function
        _.each(markers, listenToDragDrop)

        // On click, clear markers, place a new one, update coordinates in the form
        google.maps.event.addListener(handler.getMap(), 'click', function(event) {
          clearOverlays();
          placeMarker(event.latLng);
          updateFormLocation(event.latLng);
        });
    });

    function listenToDragDrop(marker){
      google.maps.event.addListener(marker.getServiceObject(), 'dragend', function() {
        updateFormLocation(marker.getServiceObject().getPosition());
      });
    }

    // Other functions
    // Update form attributes with given coordinates
    function updateFormLocation(latLng) {
      $('#gmap_latitude').val(latLng.lat());
      $('#gmap_longitude').val(latLng.lng());
      $('#gmap_zoom').val(handler.getMap().getZoom());
    }

    // Add a marker with an open infowindow
    function placeMarker(latLng) {
      var marker = handler.addMarker({
        lat: latLng.lat(),
        lng: latLng.lng(),
        infowindow: '<div class="popup">Drag me and adjust the zoom level.</p>'
      }, markers_options)

      markers.push(marker)

      // Set and open infowindow
      google.maps.event.trigger(marker.getServiceObject(), 'click');

      listenToDragDrop(marker);
    }

    // // Removes the overlays from the map, including the ones loaded with the map itself
    function clearOverlays() {
      handler.removeMarkers(markers);
      markers = [];
    }